// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/config.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/config.go -destination=internal/core/port/mock_config_port.go -package=port
//
// Package port is a generated GoMock package.
package port

import (
	context "context"
	reflect "reflect"
	domain "repartners/internal/core/domain"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigService is a mock of ConfigService interface.
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService.
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance.
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// GetConfigOrdered mocks base method.
func (m *MockConfigService) GetConfigOrdered(ctx context.Context, logger *logrus.Entry) (*domain.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigOrdered", ctx, logger)
	ret0, _ := ret[0].(*domain.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigOrdered indicates an expected call of GetConfigOrdered.
func (mr *MockConfigServiceMockRecorder) GetConfigOrdered(ctx, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigOrdered", reflect.TypeOf((*MockConfigService)(nil).GetConfigOrdered), ctx, logger)
}

// UpdateConfig mocks base method.
func (m *MockConfigService) UpdateConfig(ctx context.Context, config *domain.Config, logger *logrus.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", ctx, config, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockConfigServiceMockRecorder) UpdateConfig(ctx, config, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockConfigService)(nil).UpdateConfig), ctx, config, logger)
}
